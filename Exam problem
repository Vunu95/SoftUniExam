// Code
using System;

namespace TestApp;

public class CenterPoint
{
    public static string GetClosest(double x1, double y1, double x2, double y2)
    {
        double pointOne = Math.Abs(x1) + Math.Abs(y1);
        double pointTwo = Math.Abs(x2) + Math.Abs(y2);

        string firstPointReport = $"({string.Join(", ", x1, y1)})";
        string secondPointReport = $"({string.Join(", ", x2, y2)})";

        if (pointOne > pointTwo)
        {
            return secondPointReport;
        }
        else if (pointOne < pointTwo)
        {
            return firstPointReport;
        }
        else
        {
            if( x2 < 0 || y2 < 0)
            {
                return secondPointReport;
            }

            return firstPointReport;
        }
    }
}


// Automated Tests 
using System;
using NUnit.Framework;

namespace TestApp.Tests;

public class CenterPointTests
{
    [Test]
    public void Test_GetClosest_WhenFirstPointIsCloser_ShouldReturnFirstPoint()
    {
        //Arrange
        double firstpointX = 1;
        double firstpointY = 1;
        double secondPointX = 4;
        double secondPointY = 4;
        //Act - rusltata
        string result = CenterPoint.GetClosest(firstpointX, firstpointY, secondPointX, secondPointY);
        //Assert
        Assert.AreEqual("(1, 1)", result);
    }

    [Test]
    public void Test_GetClosest_WhenSecondPointIsCloser_ShouldReturnSecondPoint()
    {
        // TODO: implement the test
        double firstpointX = 5;
        double firstpointY = 5;
        double secondPointX = 3;
        double secondPointY = 3;
        //Act - rusltata
        string result = CenterPoint.GetClosest(firstpointX, firstpointY, secondPointX, secondPointY);
        //Assert
        Assert.AreEqual("(3, 3)", result);
    }

    [Test]
    public void Test_GetClosest_WhenBothPointsHaveEqualDistance_ShouldReturnFirstPoint()
    {
        // TODO: implement the test
        double firstpointX = 4;
        double firstpointY = 4;
        double secondPointX = 4;
        double secondPointY = 4;
        //Act - rusltata
        string result = CenterPoint.GetClosest(firstpointX, firstpointY, secondPointX, secondPointY);
        //Assert
        Assert.AreEqual("(4, 4)", result);
    }

    [Test]
    public void Test_GetClosest_WhenFirstPointIsNegative_ShouldReturnFirstPoint()
    {
        // TODO: implement the test
        double firstpointX = -1;
        double firstpointY = -1;
        double secondPointX = 4;
        double secondPointY = 4;
        //Act - rusltata
        string result = CenterPoint.GetClosest(firstpointX, firstpointY, secondPointX, secondPointY);
        //Assert
        Assert.AreEqual("(-1, -1)", result);
    }

    [Test]
    public void Test_GetClosest_WhenSecondPointIsNegative_ShouldReturnSecondPoint()
    {
        // TODO: implement the test
        double firstpointX =1;
        double firstpointY = 1;
        double secondPointX =-1;
        double secondPointY = -1;
        //Act - rusltata
        string result = CenterPoint.GetClosest(firstpointX, firstpointY, secondPointX, secondPointY);
        //Assert
        Assert.AreEqual("(-1, -1)", result);
    }
}
